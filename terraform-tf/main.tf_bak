
provider "aws" {
  region = "us-east-1"
  access_key = "AKIA5SBVMPMFHEWDETBD"
  secret_key = "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" 
}

  




# 1 create vpc
# 2 create internet gateway
# 3 create route table
# 4 create a subnet
# 5 associate subnet with route table
# 6 create security group to allow port 22, 80, 443
# 7 create a network interface with an ip in the subnet that was created in step 4
# 8 assign an elastic ip to the network interface that was created in step 7
# create ubuntu server and instal apache2


resource "aws_vpc" "my_first_vpc" {
  cidr_block       = "10.0.0.0/16"
  instance_tenancy = "default"

  tags = {
    Name = "production"
  }
}

resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.my_first_vpc.id

  tags = {
    Name = "prod_gateway"
  }
}

resource "aws_route_table" "my_route_table" {
  vpc_id = aws_vpc.my_first_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }

  route {
    ipv6_cidr_block        = "::/0"
    gateway_id = aws_internet_gateway.gw.id
  }

  tags = {
    Name = "prod_route_table"
  }
}
resource "aws_subnet" "subnet-1" {
  vpc_id     = aws_vpc.my_first_vpc.id
  cidr_block = "10.0.1.0/24"
  availability_zone = "us-east-1a"
  tags = {
    Name = "prod-subnet-1"
  }
}

resource "aws_route_table_association" "route-tabe_assoc" {
  subnet_id      = aws_subnet.subnet-1.id
  route_table_id = aws_route_table.my_route_table.id
}


resource "aws_security_group" "sg" {
  name        = "allow_tls"
  description = "Allow TLS inbound traffic"
  vpc_id      = aws_vpc.my_first_vpc.id

  ingress {
    description      = "HTTPS"
    from_port        = 443
    to_port          = 443
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    
  }
  ingress {
    description      = "HTTP"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    
  }
  ingress {
    description      = "SSH"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
   
  }

  tags = {
    Name = "allow_web"
  }
}


resource "aws_network_interface" "web-server-nic" {
  subnet_id       = aws_subnet.subnet-1.id
  private_ips     = ["10.0.1.50"]
  security_groups = [aws_security_group.sg.id]

#   attachment {
#     instance     = aws_instance.test.id
#     device_index = 1
#   }
}

resource "aws_eip" "one-eip" {
  vpc                       = true
  network_interface         = aws_network_interface.web-server-nic.id
  associate_with_private_ip = "10.0.1.50"
  depends_on = [
    aws_internet_gateway.gw
  ]
}


resource "aws_instance" "my_first_ec2" {
  ami = "ami-085925f297f89fce1"
   instance_type = "t2.micro"
   availability_zone = "us-east-1a"
   key_name = "main-key"
   network_interface {
     device_index= 0
     network_interface_id = aws_network_interface.web-server-nic.id
   }
   user_data = <<-EOF
   #!/bin/bash
   sudo apt update -y
   sudo apt install apache2 -y
   sudo systemctl start apache2
   sudo bash -c 'echo your very first web server > /var/www/html/index.html'
   EOF 
   tags = {
      "Name" = "my_first_ec2"
    }
 }